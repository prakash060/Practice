// <auto-generated />
using System;
using Ecolab.AuditChallenge.Database.AuditChallenge;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecolab.AuditChallenge.Database.Migrations
{
    [DbContext(typeof(AuditChallengeContext))]
    partial class AuditChallengeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Ecolab.AuditChallenge.Database.AuditChallenge.Models.AccountConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<int>("LimitToChallenge")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int>("LimitToReview")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("AccountConfiguration");
                });

            modelBuilder.Entity("Ecolab.AuditChallenge.Database.AuditChallenge.Models.ChallengedAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(11);

                    b.Property<int>("FindingsCount")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(12);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(5);

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4);

                    b.Property<Guid>("ServiceResponseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<string>("SurveyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(6);

                    b.Property<string>("UnitNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8);

                    b.HasKey("Id");

                    b.ToTable("ChallengedAudit");
                });

            modelBuilder.Entity("Ecolab.AuditChallenge.Database.AuditChallenge.Models.ChallengedQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("ChallengedAuditId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(11);

                    b.Property<bool>("IsChallenged")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit")
                        .HasColumnOrder(9);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnOrder(7);

                    b.Property<string>("PickLists")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnOrder(6);

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(5);

                    b.Property<Guid>("SurveyQuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("ChallengedAuditId");

                    b.ToTable("ChallengedQuestion");
                });

            modelBuilder.Entity("Ecolab.AuditChallenge.Database.AuditChallenge.Models.ChallengedQuestionDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<string>("ChallengeNotes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnOrder(5);

                    b.Property<string>("ChallengedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("ChallengedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(4);

                    b.Property<Guid>("ChallengedQuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(11);

                    b.Property<string>("ReviewNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnOrder(8);

                    b.Property<string>("ReviewedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(7);

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.HasKey("Id");

                    b.HasIndex("ChallengedQuestionId")
                        .IsUnique();

                    b.ToTable("ChallengedQuestionDetail");
                });

            modelBuilder.Entity("Ecolab.AuditChallenge.Database.AuditChallenge.Models.RoleConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5);

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(6);

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.ToTable("RoleConfiguration");
                });

            modelBuilder.Entity("Ecolab.AuditChallenge.Database.AuditChallenge.Models.ChallengedQuestion", b =>
                {
                    b.HasOne("Ecolab.AuditChallenge.Database.AuditChallenge.Models.ChallengedAudit", "ChallengedAudit")
                        .WithMany("ChallengedQuestions")
                        .HasForeignKey("ChallengedAuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChallengedAudit");
                });

            modelBuilder.Entity("Ecolab.AuditChallenge.Database.AuditChallenge.Models.ChallengedQuestionDetail", b =>
                {
                    b.HasOne("Ecolab.AuditChallenge.Database.AuditChallenge.Models.ChallengedQuestion", "ChallengedQuestion")
                        .WithOne("ChallengedQuestionStatusDetails")
                        .HasForeignKey("Ecolab.AuditChallenge.Database.AuditChallenge.Models.ChallengedQuestionDetail", "ChallengedQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChallengedQuestion");
                });

            modelBuilder.Entity("Ecolab.AuditChallenge.Database.AuditChallenge.Models.ChallengedAudit", b =>
                {
                    b.Navigation("ChallengedQuestions");
                });

            modelBuilder.Entity("Ecolab.AuditChallenge.Database.AuditChallenge.Models.ChallengedQuestion", b =>
                {
                    b.Navigation("ChallengedQuestionStatusDetails")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
